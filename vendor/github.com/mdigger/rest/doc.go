/*
Package rest является простенькой библиотекой для быстрого создания web
проектов.

Вообще, библиотека написана исключительно для внутреннего использования и
нет никаких гарантий, что она не будет время от времени серьезно изменяться.
Поэтому, если вы хотите использовать ее в своих проектах, то делайте fork.

Достоинства

Основные достоинства в том, что она компактная и минималистская, облегчает
некоторые часто используемые вещи, поддерживает параметры в пути, совместима
со стандартной библиотекой http и позволяет описывать обработчики в таком
виде, как удобно мне. Библиотека не включает в себя никаких зависимостей от
сторонних библиотек.

Батарейки входят в комплект: я не стал разделять библиотеку на модули, а
решил включить поддержку тех вещей, которые мне обычно требуются. В
частности, сжатие ответов, вывод логов доступа и защита от ошибок в
обработчиках поддерживаются сразу и по умолчанию включены.

Библиотека поддерживает простую отдачу данных в формате JSON. Если
необходимо поддерживать другие форматы (например, MsgPack), можно
заменить Encoder на поддерживающий нужный формат. Пример кодека, который
поддерживает одновременно JSON, MsgPack, Binc и Cbor находится в подпроекте
codex.

С поддержкой middleware тоже сложилось все достаточно красиво: можно
указывать список обработчиков, которые будут выполняться последовательно.
А чтобы не пришлось это делать для каждого запроса отдельно, можно
воспользоваться вспомогательными функциями, позволяющими определять сразу
много путей и методов одновременно. Для передачи значений между
обработчиками в библиотеке предусмотрено внутреннее хранилище, которое
живет только в контексте запроса и автоматически освобождается при окончании
обработки.

Поддержка параметров в путях

В общем, это было одним из основных моментов, который побудил меня написать
данную библиотеку: очень не хватало возможности в стандартной библиотеке
задать задавать параметры и легко их получать в обработчике. Не скажу, что
решение, лежащее в основе данной реализации, является самым правильным,
быстрым, компактным или оптимальным. Но оно работает с приемлемой для меня
скоростью и пости не требует никаких ресурсов.

Синтаксис, используемый для задания параметров пути, достаточно традиционен
и встречается почти во всех аналогичных библиотеках: символ `:` в начала
задает именованный параметр пути, а символ `*` может использоваться в
качестве завершающего параметра, который "сожрет" весь оставший путь. Вот
несколько примеров задания пути:

	/users/:id
	/users/:id/files
	/users/:id/files/*file

Количество элементов пути ограничено 32768 элементами, но я сильно надеюсь,
что этого мне хватит для любых проектов. Еще одно ограничение: параметр
`*` можно использовать только в самом конце пути и после него не должно
быть никаких других элементов.

Для чтения значения параметра пути используется функция контекста:

	id := c.Param("id")

Контекст

Да, я пошел порочным путем и объединил http.Request с http.ResponseWriter
в одном своем объекте Context, добавив к нему некоторые вспомогательные
функции. С одной стороны, это не очень правильно. Но, черт возьми, красиво
и просто СУЩЕСТВЕННО сокращает количество символов, которые нужно набрать,
чтобы описать обработчик запроса. А еще это позволило обеспечить прозрачную
поддержку некоторым удобным вещам.
*/
package rest
