package rest

import (
	"os"

	"github.com/mdigger/log"
)

// Глобальные переменные библиотеки, позволяющие переопределять особенности
// ее поведения. Сюда вынесено все, что может быть использовано библиотекой
// глобально, а не в контексте одного запроса, и что может потребовать
// переопределения пользователем.
//
// В частности, если появится необходимость использования вместо формата JSON,
// например, MsgPacл, то это можно достаточно легко осуществить, просто заменим
// Encoder соответствующим обработчиком. Кстати, подпроект codex как раз
// содержит пример одной из возможных его имплементаций.
var (
	// Взведенный флаг Debug указывает, что описания ошибок возвращаются как
	// есть. В противном случае всегда возвращается только стандартное описание
	// статуса HTTP, сформированное на базе этой ошибки.
	Debug bool = false

	// Флаг Compress разрешает сжатие данных. Чтобы запретить сжимать данные,
	// установите значение данного флага в false. При инициализации сжатия
	// проверяется, что оно уже не включено, например, на уровне глобального
	// обработчика запросов и, в этом случае, сжатие не будет включено, даже
	// если флаг установлен.
	Compress bool = true

	// Encoder описывает функции, используемые для разбора запроса и кодирования
	// ответа. MaxBody задает максимальный размер поддерживаемого запроса.
	// Если размер превышает указанный, то возвращается ошибка. Если не хочется
	// ограничений, то можно установить значение 0, тогда проверка производиться
	// не будет.
	Encoder Coder = JSONCoder{1 << 15, true} // 32 мегабайта и отступы

	// EncodeError управляет форматом вывода ошибок: если флаг не взведен, то
	// ошибки отдаются как текст. В противном случае описание ошибок
	// кодируется с помощью Encoder и содержат статус и описание ошибки.
	EncodeError bool = true

	// Logger отвечает за вывод лога обращений к HTTP серверу.
	Logger *log.Context
)

func init() {
	console := log.NewConsole(os.Stdout, log.LstdFlags|log.Lindent)
	console.SetLevel(log.DebugLevel)
	Logger = console.Context()
}
